/* Copyright (c) 2013-2014, Null McNull https://github.com/McNull, LICENSE: MIT */
!function (a) { a.module("blockUI", ["templates-angularBlockUI"]), a.module("blockUI").config(["$provide", "$httpProvider", function (b, c) { var d = { templateUrl: "angular-block-ui/angular-block-ui.tmpl.html", delay: 250, message: "Aguarde ...", autoBlock: 0, resetOnException: !0, requestFilter: a.noop }; b.provider("blockUIConfig", function () { this.templateUrl = function (a) { d.templateUrl = a }, this.template = function (a) { d.template = a }, this.delay = function (a) { d.delay = a }, this.message = function (a) { d.message = a }, this.autoBlock = function (a) { d.autoBlock = a }, this.resetOnException = function (a) { d.resetOnException = a }, this.requestFilter = function (a) { d.requestFilter = a }, this.$get = function () { return d } }), b.decorator("$exceptionHandler", ["$delegate", "$injector", function (a, b) { var c; return function (e, f) { d.resetOnException && (c = c || b.get("blockUI"), c.reset()), a(e, f) } }]), b.factory("blockUIHttpInterceptor", ["$q", "$injector", function (a, b) { function c() { f = f || b.get("blockUI") } function e(b) { return d.autoBlock && (c(), f.stop()), a.reject(b) } var f; return { request: function (a) { return d.autoBlock && (d.requestFilter(a) === !1 ? a.$_noBlock = !0 : (c(), f.start())), a }, requestError: e, response: function (a) { return d.autoBlock && !a.config.$_noBlock && (c(), f.stop()), a }, responseError: e } }]), c.interceptors.push("blockUIHttpInterceptor") }]), a.module("blockUI").directive("blockUi", ["blockUI", "blockUIConfig", function (a, b) { return { restrict: "A", templateUrl: b.template ? void 0 : b.templateUrl, template: b.template, link: function (b) { b.state = a.state(); var c = b.$on("$viewContentLoaded", function () { c(), b.$on("$locationChangeStart", function (a) { b.state.blockCount > 0 && a.preventDefault() }) }) } } }]), a.module("blockUI").factory("blockUI", ["blockUIConfig", "$timeout", function (b, c) { function d(a) { k.message = a || b.message, k.blockCount++, j || (j = c(function () { j = null, k.blocking = !0 }, b.delay)) } function e() { j && (c.cancel(j), j = null) } function f() { k.blockCount = Math.max(0, --k.blockCount), 0 === k.blockCount && h(!0) } function g(a) { k.message = a } function h(b) { e(), k.blockCount = 0, k.blocking = !1; try { b && a.forEach(l, function (a) { a() }) } finally { l.length = 0 } } function i(a) { l.push(a) } var j, k = { blockCount: 0, message: b.message, blocking: !1 }, l = []; return { state: function () { return k }, start: d, stop: f, message: g, reset: h, done: i } }]), a.module("blockUI").run(["$document", function (a) { a.find("body").append("<div block-ui></div>") }]) }(angular), angular.module("templates-angularBlockUI", ["angular-block-ui/angular-block-ui.tmpl.html"]), angular.module("angular-block-ui/angular-block-ui.tmpl.html", []).run(["$templateCache", function (a) { a.put("angular-block-ui/angular-block-ui.tmpl.html", '<div ng-show="state.blockCount > 0" class="block-ui-overlay" ng-class="{ \'block-ui-visible\': state.blocking }"></div>\n<div ng-show="state.blocking" class="block-ui-message-container">\n  <div class="block-ui-message"><span><i class="icon-spinner white block-ui-loader"></i></span><span>&nbsp;{{ state.message }}</span></div>  \n</div>\n') }]);